# First install tox:
#
#   ./sage -i tox
#
# All tests require an installation of the non-Python components of the Sage distribution
# in SAGE_LOCAL.
#
# To build and test in the tox environment using the concrete Python dependencies specified
# by requirements.txt, using the wheels built and stored by the Sage distribution:
# (Using 'sage -sh' ensures that we use the same Python as the one that we built the wheels
#  for. This can also be done ensured manually by using the tox environment py38-sagewheels etc.)
#
#   ./sage -sh -c '(cd build/pkgs/sagelib/src && tox -v -v -v -e python-sagewheels)'
#
# To use ONLY the wheels built and stored by the Sage distribution (no PyPI):
# (FIXME: This currently fails because PEP 517 projects such as pplpy insist on their own
#         setuptools, which we don't have as a wheel.)
#
#   ./sage -sh -c '(cd build/pkgs/sagelib/src && tox -v -v -v -e python-sagewheels-nopypi)'
#
# To build and test without using the concrete dependencies specified by requirements.txt,
# using the dependencies declared in setup.cfg (install-requires) only:
#
#   ./sage -sh -c '(cd build/pkgs/sagelib/src && tox -v -v -v -e python-sagewheels-norequirements)'
#
# Afterwards, to test interactively:
#
#   build/pkgs/sagelib/src/.tox/ENVIRONMENT/bin/python
#   build/pkgs/sagelib/src/.tox/ENVIRONMENT/bin/sage
#
[tox]

[testenv]
deps =
    sagewheels:      --index-url=file://{env:SAGE_SPKG_WHEELS:{env:SAGE_LOCAL:{toxinidir}/../../../../local}/var/lib/sage/wheels/simple}
    !nopypi:         --extra-index-url=https://pypi.python.org/simple
    !norequirements: -rrequirements.txt

    # These are dependencies of the build system (setup.py).
    # Later we will declare them using pyproject.toml
    norequirements:  Cython
    norequirements:  pkgconfig
    norequirements:  numpy

passenv =
    # SAGE_LOCAL only for finding the wheels
    SAGE_LOCAL
    SAGE_SPKG_WHEELS

setenv =
    # Sage scripts such as sage-runtests like to use $HOME/.sage
    HOME={envdir}

whitelist_externals =
    bash

commands =
    # Beware of the treacherous non-src layout. "./sage/" shadows the installed sage package.
    python -c 'import sys; "" in sys.path and sys.path.remove(""); import sage.all; print(sage.all.__file__)'

    # We check that the "sage" script invokes the correct Python.
    sage -c 'import sys; print("sys.path =", sys.path); import sage.all; print(sage.all.__file__)'

    sage -t -p --all
